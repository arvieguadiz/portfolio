{"version":3,"sources":["logo.svg","components/App.js","reportWebVitals.js","index.js"],"names":["ColorModeContext","createContext","toggleColorMode","MyApp","theme","useTheme","colorMode","useContext","Paper","variant","palette","mode","IconButton","onClick","Brightness7","Brightness4","className","src","logo","alt","href","target","rel","App","useState","setMode","useMemo","prevMode","createTheme","Provider","value","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementById","props","Object","assign","dataset","ReactDOM","render","StrictMode"],"mappings":"6QAAe,MAA0B,iC,eCQnCA,EAAmBC,wBAAc,CAAEC,gBAAiB,eAuBpDC,EAAQ,WACZ,IAAMC,EAAQC,cACRC,EAAYC,qBAAWP,GAE7B,OACE,eAACQ,EAAA,EAAD,CAWEC,QAAQ,WAXV,UAaGL,EAAMM,QAAQC,KAbjB,QAcE,cAACC,EAAA,EAAD,CAAYC,QAASP,EAAUJ,gBAA/B,SAC0B,SAAvBE,EAAMM,QAAQC,KAAkB,cAACG,EAAA,EAAD,IAAkB,cAACC,EAAA,EAAD,MAGrD,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,kCA2CKC,EA7BH,WACV,MAA0BC,mBAAS,SAAnC,mBAAQb,EAAR,KAAcc,EAAd,KAEMnB,EAAYoB,mBAAQ,iBAAO,CAC/BxB,gBAAiB,WACfuB,GAAQ,SAACE,GAAD,MAA4B,UAAbA,EAAuB,OAAS,eAEvD,IAEEvB,EAAQsB,mBAAQ,kBAAME,YAAY,CACtClB,QAAS,CACPC,YAEA,CAACA,IAEL,OACE,cAACX,EAAiB6B,SAAlB,CAA2BC,MAAOxB,EAAlC,SACE,cAACyB,EAAA,EAAD,CAAe3B,MAAOA,EAAtB,SAME,cAAC,EAAD,SCrFO4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDd,GAAIQ,SAASC,eAAe,QAAS,CACnC,IAAMC,EAAQC,OAAOC,OAAO,GAAIJ,SAASC,eAAe,QAAQI,SAChEC,IAASC,OAAO,cAAC,IAAMC,WAAP,UAAkB,cAAC,EAAD,eAASN,MAA8BF,SAASC,eAAe,SAMnGV,M","file":"static/js/main.525a5aca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { createContext, useContext, useMemo, useState } from 'react';\nimport { Box, IconButton, Paper, Typography } from '@mui/material';\nimport { createTheme, ThemeProvider, useTheme } from '@mui/material/styles';\nimport { Brightness4, Brightness7 } from '@mui/icons-material';\nimport logo from '../logo.svg';\nimport '../App.css';\n// import mainTheme from './config/theme';\n\nconst ColorModeContext = createContext({ toggleColorMode: () => {} });\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nconst MyApp = () => {\n  const theme = useTheme();\n  const colorMode = useContext(ColorModeContext);\n\n  return (\n    <Paper\n      // sx={{\n      //   display: 'flex',\n      //   width: '100%',\n      //   alignItems: 'center',\n      //   justifyContent: 'center',\n      //   bgcolor: 'background.default',\n      //   color: 'text.primary',\n      //   borderRadius: 1,\n      //   p: 3,\n      // }}\n      variant=\"outlined\"\n    >\n      {theme.palette.mode} mode\n      <IconButton onClick={colorMode.toggleColorMode}>\n        {theme.palette.mode === 'dark' ? <Brightness7 /> : <Brightness4 />}\n      </IconButton>\n      \n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    </Paper>\n  );\n};\n\nconst App = () => {\n  const [ mode, setMode ] = useState('light');\n\n  const colorMode = useMemo(() => ({\n    toggleColorMode: () => {\n      setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n    },\n  }), [],);\n\n  const theme = useMemo(() => createTheme({\n    palette: {\n      mode,\n    },\n  }), [mode],);\n\n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        {/* <Paper variant=\"outlined\">\n          <Box m={3}>\n            <Typography variant=\"h1\">Hello World</Typography>\n          </Box>\n        </Paper> */}\n        <MyApp />\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nif (document.getElementById('root')) {\n  const props = Object.assign({}, document.getElementById('root').dataset);\n  ReactDOM.render(<React.StrictMode><App {...props} /></React.StrictMode>, document.getElementById('root'));\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}