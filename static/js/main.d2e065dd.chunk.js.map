{"version":3,"sources":["logo.svg","components/App.js","reportWebVitals.js","index.js"],"names":["ColorModeContext","createContext","toggleColorMode","drawerWidth","useStyles","makeStyles","theme","root","display","appBar","width","marginLeft","drawer","flexShrink","drawerPaper","toolbar","flexDirection","alignItems","justifyContent","padding","spacing","height","backgroundColor","deepOrange","color","MyApp","useTheme","colorMode","useContext","Paper","variant","palette","type","IconButton","onClick","Brightness7","Brightness4","className","src","logo","alt","href","target","rel","App","classes","useState","mode","setMode","drawerItems","icon","Person","label","to","ViewList","Code","Email","useMemo","prevMode","createTheme","Fragment","Provider","value","ThemeProvider","Box","CssBaseline","Drawer","anchor","paper","Typography","style","fontWeight","paddingTop","List","map","item","index","ListItem","button","component","Link","ListItemIcon","ListItemText","primary","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementById","props","Object","assign","dataset","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d2e065dd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { createContext, useContext, useMemo, useState } from 'react';\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\nimport { AppBar, Box, CssBaseline, Divider, Drawer, IconButton, List, ListItem, ListItemIcon, ListItemText, Paper, Toolbar, Typography } from '@material-ui/core';\nimport { createTheme, makeStyles, ThemeProvider, useTheme } from '@material-ui/core/styles';\nimport { deepOrange } from '@material-ui/core/colors';\nimport {\n  Brightness4,\n  Brightness7,\n  Code as CodeIcon,\n  Email as EmailIcon,\n  Person as PersonIcon,\n  ViewList as ViewListIcon\n} from '@material-ui/icons';\nimport logo from '../logo.svg';\nimport { map } from 'lodash';\n// import '../App.css';\n// import mainTheme from './config/theme';\n\nconst ColorModeContext = createContext({ toggleColorMode: () => {} });\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  toolbar: {\n    // ...theme.mixins.toolbar,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-end',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(2),\n    height: 240,\n    backgroundColor: deepOrange['A200'],\n    color: '#fff',\n  },\n}));\n\nconst MyApp = () => {\n  const theme = useTheme();\n  const colorMode = useContext(ColorModeContext);\n\n  return (\n    <Paper\n      // sx={{\n      //   display: 'flex',\n      //   width: '100%',\n      //   alignItems: 'center',\n      //   justifyContent: 'center',\n      //   bgcolor: 'background.default',\n      //   color: 'text.primary',\n      //   borderRadius: 1,\n      //   p: 3,\n      // }}\n      variant=\"outlined\"\n    >\n      {theme.palette.type} mode\n      <IconButton onClick={colorMode.toggleColorMode}>\n        {theme.palette.type === 'dark' ? <Brightness7 /> : <Brightness4 />}\n      </IconButton>\n      \n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    </Paper>\n  );\n};\n\nconst App = () => {\n  const classes = useStyles();\n\n  const [ mode, setMode ] = useState({ type: 'light' });\n\n  const drawerItems = [\n    {\n      icon: <PersonIcon />,\n      label: 'About',\n      to: '/portfolio',\n    },\n    {\n      icon: <ViewListIcon />,\n      label: 'Skills',\n      to: '/skills',\n    },\n    {\n      icon: <CodeIcon />,\n      label: 'Works',\n      to: '/works',\n    },\n    {\n      icon: <EmailIcon />,\n      label: 'Contact',\n      to: '/contact',\n    },\n  ];\n\n  const colorMode = useMemo(() => ({\n    toggleColorMode: () => {\n      setMode((prevMode) => (prevMode.type === 'light' ? { type: 'dark' } : { type: 'light' }));\n    },\n  }), [],);\n\n  const theme = useMemo(() => createTheme({\n    palette: { ...mode, },\n  }), [mode],);\n\n  return (\n    // <ColorModeContext.Provider value={colorMode}>\n    //   <ThemeProvider theme={theme}>\n    //     {/* <Paper variant=\"outlined\">\n    //       <Box m={3}>\n    //         <Typography variant=\"h1\">Hello World</Typography>\n    //       </Box>\n    //     </Paper> */}\n    //     <MyApp />\n    //   </ThemeProvider>\n    // </ColorModeContext.Provider>\n\n    <React.Fragment>\n      <ColorModeContext.Provider value={colorMode}>\n        <ThemeProvider theme={theme}>\n          <BrowserRouter>\n            <Box className={classes.root}>\n              <CssBaseline />\n              {/* <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                  <Typography variant=\"h6\" noWrap>Title</Typography>\n                </Toolbar>\n              </AppBar> */}\n\n              <Drawer\n                variant=\"permanent\"\n                anchor=\"left\"\n                className={classes.drawer}\n                classes={{\n                  paper: classes.drawerPaper,\n                }}\n              >\n                <Box className={classes.toolbar}>\n                  <Typography variant=\"h5\">Christian Arvie</Typography>\n                  <Typography variant=\"h4\" style={{ fontWeight: 'bold' }}>Benito</Typography>\n                  <Typography variant=\"caption\" style={{ color: '#000', paddingTop: 15 }}>Web Developer</Typography>\n                </Box>\n                {/* <Divider /> */}\n                <List>\n                  {\n                    map(drawerItems, (item, index) => {\n                      return (\n                        <ListItem button key={`item-${item.label}`} component={Link} to={item.to}>\n                          <ListItemIcon>{ item.icon }</ListItemIcon>\n                          <ListItemText primary={item.label} />\n                        </ListItem>\n                      );\n                    })\n                  }\n                </List>\n                {/* <Divider /> */}\n              </Drawer>\n\n              <main>\n                <Routes>\n                  <Route path=\"/portfolio\" element={<MyApp />} />\n                  <Route path=\"/skills\" element={<MyApp />} />\n                  <Route path=\"/works\" element={<MyApp />} />\n                  <Route path=\"/contact\" element={<MyApp />} />\n                </Routes>\n              </main>\n            </Box>\n          </BrowserRouter>\n        </ThemeProvider>\n      </ColorModeContext.Provider>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nif (document.getElementById('root')) {\n  const props = Object.assign({}, document.getElementById('root').dataset);\n  ReactDOM.render(<React.StrictMode><App {...props} /></React.StrictMode>, document.getElementById('root'));\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}