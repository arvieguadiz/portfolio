{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["ColorModeContext","createContext","toggleColorMode","drawerWidth","useStyles","makeStyles","theme","root","display","appBar","width","marginLeft","drawer","flexShrink","drawerPaper","toolbar","flexDirection","alignItems","justifyContent","padding","spacing","height","backgroundColor","deepOrange","color","nestedDrawerItems","paddingLeft","AppContent","classes","useTheme","colorMode","useContext","useState","openSettings","setOpenSettings","drawerItems","icon","PersonOutline","label","url","Code","AlternateEmail","Box","className","CssBaseline","Drawer","variant","anchor","paper","Typography","style","fontWeight","paddingTop","List","map","item","index","ListItem","button","component","Link","to","ListItemIcon","ListItemText","primary","Divider","onClick","Tune","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","disablePadding","palette","type","Brightness4","Brightness7","capitalize","path","element","App","themeMode","setThemeMode","useMemo","prevMode","mainTheme","createTheme","Fragment","Provider","value","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c9ebc82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { createContext, useContext, useMemo, useState } from 'react';\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\nimport { Box, Collapse, CssBaseline, Divider, Drawer, List, ListItem, ListItemIcon, ListItemText, Typography } from '@material-ui/core';\nimport { AlternateEmail as AlternateEmailIcon, Brightness4 as Brightness4Icon, Brightness7 as Brightness7Icon, Code as CodeIcon, ExpandLess as ExpandLessIcon, ExpandMore as ExpandMoreIcon, List as ListIcon, PersonOutline as PersonOutlineIcon, Tune as TuneIcon } from '@material-ui/icons';\nimport { createTheme, makeStyles, ThemeProvider, useTheme } from '@material-ui/core/styles';\nimport { deepOrange } from '@material-ui/core/colors';\nimport { capitalize, map } from 'lodash';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nconst ColorModeContext = createContext({ toggleColorMode: () => {} });\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  toolbar: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-end',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(2),\n    height: 240,\n    backgroundColor: deepOrange['A200'],\n    color: '#fff',\n  },\n  nestedDrawerItems: {\n    paddingLeft: theme.spacing(4),\n  },\n}));\n\n// const mainTheme = createTheme({\n//   palette: {\n//     type: 'dark',\n//   },\n// });\n\nconst AppContent = () => {\n  const classes = useStyles();\n  \n  const theme = useTheme();\n  const colorMode = useContext(ColorModeContext);\n  \n  const [ openSettings, setOpenSettings ] = useState(true);\n\n  const drawerItems = [\n    {\n      icon: <PersonOutlineIcon />,\n      label: 'About',\n      url: '/portfolio',\n    },\n    {\n      icon: <ListIcon />,\n      label: 'Skills',\n      url: '/skills',\n    },\n    {\n      icon: <CodeIcon />,\n      label: 'Works',\n      url: '/works',\n    },\n    {\n      icon: <AlternateEmailIcon />,\n      label: 'Contact',\n      url: '/contact',\n    },\n  ];\n\n  return (\n    <BrowserRouter>\n      <Box className={classes.root}>\n        <CssBaseline />\n        <Drawer\n          variant=\"permanent\"\n          anchor=\"left\"\n          className={classes.drawer}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <Box className={classes.toolbar}>\n            <Typography variant=\"h5\">Christian Arvie</Typography>\n            <Typography variant=\"h4\" style={{ fontWeight: 'bold' }}>Benito</Typography>\n            <Typography variant=\"caption\" style={{ color: '#000', paddingTop: 15 }}>Web Developer</Typography>\n          </Box>\n\n          <List>\n            {\n              map(drawerItems, (item, index) => {\n                return (\n                  <ListItem button key={`item${item.label}`} component={Link} to={item.url}>\n                    <ListItemIcon>{ item.icon }</ListItemIcon>\n                    <ListItemText primary={item.label} />\n                  </ListItem>\n                );\n              })\n            }\n          </List>\n\n          <Divider />\n\n          <List>\n            <ListItem button onClick={() => setOpenSettings(!openSettings)}>\n              <ListItemIcon><TuneIcon /></ListItemIcon>\n              <ListItemText primary=\"Settings\" />\n              { openSettings ? <ExpandLessIcon /> : <ExpandMoreIcon /> }\n            </ListItem>\n\n            <Collapse in={openSettings} timeout=\"auto\" unmountOnExit>\n              <List disablePadding>\n                <ListItem button className={classes.nestedDrawerItems} onClick={colorMode.toggleColorMode}>\n                  <ListItemIcon>{ theme.palette.type === 'light' ? <Brightness4Icon /> : <Brightness7Icon /> }</ListItemIcon>\n                  <ListItemText primary={`${capitalize(theme.palette.type === 'light' ? 'dark' : 'light')} mode`} />\n                </ListItem>\n              </List>\n            </Collapse>\n          </List>\n        </Drawer>\n\n        <main>\n          <Routes>\n            <Route path=\"/portfolio\" element={<Typography variant=\"h2\">About</Typography>} />\n            <Route path=\"/skills\" element={<Typography variant=\"h2\">Skills</Typography>} />\n            <Route path=\"/works\" element={<Typography variant=\"h2\">Works</Typography>} />\n            <Route path=\"/contact\" element={<Typography variant=\"h2\">Contact</Typography>} />\n          </Routes>\n        </main>\n      </Box>\n    </BrowserRouter>\n  );\n}\n\nconst App = () => {\n  const [ themeMode, setThemeMode ] = useState({ type: 'light' });\n\n  const colorMode = useMemo(() => ({\n    toggleColorMode: () => {\n      setThemeMode((prevMode) => (prevMode.type === 'light' ? { type: 'dark' } : { type: 'light' }));\n    },\n  }), [],);\n\n  const mainTheme = useMemo(() => createTheme({\n    palette: {\n      ...themeMode,\n    },\n  }), [themeMode],);\n  \n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    \n    <React.Fragment>\n      <ColorModeContext.Provider value={colorMode}>\n        <ThemeProvider theme={mainTheme}>\n          <AppContent />\n        </ThemeProvider>\n      </ColorModeContext.Provider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}